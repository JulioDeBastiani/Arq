// <auto-generated />
using System;
using Arq.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Arq.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190704065302_ThirdMigration")]
    partial class ThirdMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Arq.Domain.CoRequirement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("RequirementId");

                    b.Property<Guid>("SubjectId");

                    b.HasKey("Id");

                    b.HasIndex("RequirementId");

                    b.HasIndex("SubjectId");

                    b.ToTable("CoRequirements");
                });

            modelBuilder.Entity("Arq.Domain.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<string>("Description");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("Arq.Domain.Curriculum", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<string>("Code");

                    b.Property<Guid>("CourseId");

                    b.Property<string>("Description");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.HasIndex("CourseId");

                    b.ToTable("Curriculums");
                });

            modelBuilder.Entity("Arq.Domain.Equivalence", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("EquivalentId");

                    b.Property<Guid>("SubjectId");

                    b.HasKey("Id");

                    b.HasIndex("EquivalentId");

                    b.HasIndex("SubjectId");

                    b.ToTable("Equivalences");
                });

            modelBuilder.Entity("Arq.Domain.Prerequisite", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("RequirementId");

                    b.Property<Guid>("SubjectId");

                    b.HasKey("Id");

                    b.HasIndex("RequirementId");

                    b.HasIndex("SubjectId");

                    b.ToTable("Prerequisites");
                });

            modelBuilder.Entity("Arq.Domain.Semester", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<float?>("Frequency");

                    b.Property<float?>("Grade");

                    b.Property<int>("Period");

                    b.Property<int?>("Score");

                    b.Property<int>("Status");

                    b.Property<Guid>("StudentId");

                    b.Property<Guid>("SubjectId");

                    b.Property<int>("Year");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("SubjectId");

                    b.ToTable("Semesters");
                });

            modelBuilder.Entity("Arq.Domain.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CourseId");

                    b.Property<string>("Name");

                    b.Property<string>("Password");

                    b.Property<string>("RegistrationNumber");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("RegistrationNumber")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Arq.Domain.Subject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<Guid>("CurriculumId");

                    b.Property<string>("Description");

                    b.Property<int>("MinimumGrade");

                    b.Property<int>("TargetSemester");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.HasIndex("CurriculumId");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("Arq.Domain.CoRequirement", b =>
                {
                    b.HasOne("Arq.Domain.Subject", "Requirement")
                        .WithMany("CoRequirements")
                        .HasForeignKey("RequirementId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Arq.Domain.Subject", "Subject")
                        .WithMany("CoRequiredBy")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Arq.Domain.Curriculum", b =>
                {
                    b.HasOne("Arq.Domain.Course", "Course")
                        .WithMany("Curriculums")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Arq.Domain.Equivalence", b =>
                {
                    b.HasOne("Arq.Domain.Subject", "Equivalent")
                        .WithMany("Equivalences")
                        .HasForeignKey("EquivalentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Arq.Domain.Subject", "Subject")
                        .WithMany("EquivaleTo")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Arq.Domain.Prerequisite", b =>
                {
                    b.HasOne("Arq.Domain.Subject", "Requirement")
                        .WithMany("Prerequisites")
                        .HasForeignKey("RequirementId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Arq.Domain.Subject", "Subject")
                        .WithMany("RequiredBy")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Arq.Domain.Semester", b =>
                {
                    b.HasOne("Arq.Domain.Student", "Student")
                        .WithMany("Semesters")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Arq.Domain.Subject", "Subject")
                        .WithMany("Semesters")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Arq.Domain.Student", b =>
                {
                    b.HasOne("Arq.Domain.Course", "Course")
                        .WithMany("Students")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Arq.Domain.Subject", b =>
                {
                    b.HasOne("Arq.Domain.Curriculum", "Curriculum")
                        .WithMany("Subjects")
                        .HasForeignKey("CurriculumId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
